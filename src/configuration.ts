/* tslint:disable */
/* eslint-disable */
/**
 * OpenAI API
 * APIs for sampling from and fine-tuning language models
 *
 * The version of the OpenAPI document: 1.3.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

const packageJson = require('../package.json')

export interface ConfigurationParameters {
    apiKey?:
        | string
        | Promise<string>
        | ((name: string) => string)
        | ((name: string) => Promise<string>)
    martianApiKey?:
        | string
        | Promise<string>
        | ((name: string) => string)
        | ((name: string) => Promise<string>)
    organization?: string
    username?: string
    password?: string
    accessToken?:
        | string
        | Promise<string>
        | ((name?: string, scopes?: string[]) => string)
        | ((name?: string, scopes?: string[]) => Promise<string>)
    basePath?: string
    baseOptions?: any
    formDataCtor?: new () => any
}

export class Configuration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey?:
        | string
        | Promise<string>
        | ((name: string) => string)
        | ((name: string) => Promise<string>)
    /**
     * parameter for martianApiKey security
     * @param name security name
     * @memberof Configuration
     */
    martianApiKey?:
        | string
        | Promise<string>
        | ((name: string) => string)
        | ((name: string) => Promise<string>)
    /**
     * OpenAI organization id
     *
     * @type {string}
     * @memberof Configuration
     */
    organization?: string
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    username?: string
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    password?: string
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken?:
        | string
        | Promise<string>
        | ((name?: string, scopes?: string[]) => string)
        | ((name?: string, scopes?: string[]) => Promise<string>)
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any

    constructor(param: ConfigurationParameters = {}) {
        this.apiKey = param.apiKey
        this.martianApiKey = param.martianApiKey
        this.organization = param.organization
        this.username = param.username
        this.password = param.password
        this.accessToken = param.accessToken
        this.basePath = param.basePath
        this.baseOptions = param.baseOptions
        this.formDataCtor = param.formDataCtor

        if (!this.baseOptions) {
            this.baseOptions = {}
        }
        if (!this.martianApiKey) {
            throw new Error(
                'Missing the required parameter martianApiKey when instantiating the API client. You need to set martianApiKey in the configuration or provide it in the constructor.',
            )
        }
        const authorization =
            `Bearer ${this.martianApiKey}` +
            (this.apiKey ? `, Bearer ${this.apiKey}` : '')
        this.baseOptions.headers = {
            'User-Agent': `OpenAI/NodeJS/${packageJson.version}`,
            Authorization: authorization,
            ...this.baseOptions.headers,
        }
        if (this.organization) {
            this.baseOptions.headers['OpenAI-Organization'] = this.organization
        }
        if (!this.formDataCtor) {
            this.formDataCtor = require('form-data')
        }
    }

    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    public isJsonMime(mime: string): boolean {
        const jsonMime: RegExp = new RegExp(
            '^(application/json|[^;/ \t]+/[^;/ \t]+[+]json)[ \t]*(;.*)?$',
            'i',
        )
        return (
            mime !== null &&
            (jsonMime.test(mime) ||
                mime.toLowerCase() === 'application/json-patch+json')
        )
    }
}
